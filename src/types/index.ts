export interface Course {\n  id?: number;\n  courseId: number;\n  title: string;\n  description: string;\n  author: string;\n  price: string;\n  createdAt: number;\n  updatedAt?: string;\n}\n\nexport interface Purchase {\n  id?: number;\n  courseId: number;\n  buyer: string;\n  price: string;\n  transactionHash?: string;\n  purchasedAt?: string;\n}\n\nexport interface CreateCourseRequest {\n  title: string;\n  description: string;\n  price: string;\n}\n\nexport interface WalletState {\n  account: string | null;\n  isConnected: boolean;\n  isConnecting: boolean;\n  balance: string;\n  connectWallet: () => Promise<void>;\n  disconnectWallet: () => void;\n  updateBalance: () => Promise<void>;\n}\n\nexport interface ContractState {\n  contract: any;\n  provider: any;\n  signer: any;\n  isInitialized: boolean;\n  initializeContract: () => Promise<void>;\n  createCourse: (title: string, description: string, price: string) => Promise<any>;\n  purchaseCourse: (courseId: number, price: string) => Promise<any>;\n  getCourse: (courseId: number) => Promise<Course>;\n  getUserPurchasedCourses: (userAddress: string) => Promise<number[]>;\n  hasUserPurchasedCourse: (courseId: number, userAddress: string) => Promise<boolean>;\n}\n\n// Global window type extensions\ndeclare global {\n  interface Window {\n    ethereum?: {\n      isMetaMask?: boolean;\n      request: (args: { method: string; params?: any[] }) => Promise<any>;\n      on: (event: string, callback: (...args: any[]) => void) => void;\n      removeListener: (event: string, callback: (...args: any[]) => void) => void;\n    };\n  }\n}"